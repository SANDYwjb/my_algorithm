package com.junbin.algorithm_21_40;

/**
 * 31. 下一个排列-中等
 * 整数数组的一个 排列  就是将其所有成员以序列或线性顺序排列。
 * <p>
 * 例如，arr = [1,2,3] ，以下这些都可以视作 arr 的排列：[1,2,3]、[1,3,2]、[3,1,2]、[2,3,1] 。
 * 整数数组的 下一个排列 是指其整数的下一个字典序更大的排列。更正式地，如果数组的所有排列根据其字典顺序从小到大排列在一个容器中，
 * 那么数组的 下一个排列 就是在这个有序容器中排在它后面的那个排列。如果不存在下一个更大的排列，
 * 那么这个数组必须重排为字典序最小的排列（即，其元素按升序排列）。
 * 以数字序列 [1,2,3][1,2,3][1,2,3] 为例，其排列按照字典序依次为：
 * [1,2,3]  [1,3,2]  [2,1,3]  [2,3,1]  [3,1,2]  [3,2,1]
 * 这样，排列 [2,3,1] 的下一个排列即为 [3,1,2]。特别的，最大的排列 [3,2,1]的下一个排列为最小的排列 [1,2,3]。
 * <p>
 * 思路：两遍扫描
 * 注意到下一个排列总是比当前排列要大，除非该排列已经是最大的排列。我们希望找到一种方法，能够找到一个大于当前序列的新序列，且变大的幅度尽可能小。
 * 具体地：我们需要将一个左边的「较小数」与一个右边的「较大数」交换，以能够让当前排列变大，从而得到下一个排列。
 * 同时我们要让这个「较小数」尽量靠右，而「较大数」尽可能小。当交换完成后，「较大数」右边的数需要按照升序重新排列。
 * 这样可以在保证新排列大于原来排列的情况下，使变大的幅度尽可能小。
 * 具体地，我们这样描述该算法，对于长度为 n 的排列 a：（下面的证明可以用 [4,5,3,1,2,6]，推算一遍帮助理解
 * 1. 首先 从后向前 查找第一个顺序对 (i,i+1)，满足 a[i]<a[i+1]。这样「较小数」即为 a[i]。此时 [i+1,n)必然是下降序列。
 * 2. 如果找到了顺序对，那么在区间 [i+1,n) 中从后向前查找第一个元素 j 满足 a[i]<a[j]。这样「较大数」即为 a[j]。
 * 3. 交换 a[i] 与 a[j]，此时可以证明区间 [i+1,n)必为降序。我们可以直接使用双指针反转区间 [i+1,n)使其变为升序，而无需对该区间进行排序。
 * 注意
 * 如果在步骤 1 找不到顺序对，说明当前序列已经是一个降序序列，即最大的序列，我们直接跳过步骤 2 执行步骤 3，即可得到最小的升序序列。
 *
 * @author junbin.wang
 * @date 2023/2/18上午11:45
 */
public class NextPermutation_31 {
    public void nextPermutation(int[] nums) {
        int i = nums.length - 2;
        // 遍历知道找到第一个nums[i]<nums[i+1]
        while (i >= 0 && nums[i] >= nums[i + 1]) {
            i--;
        }
        if (i >= 0) {
            int j = nums.length - 1;
            // 在区间 [i+1,n) 中从后向前查找第一个元素 j 满足 a[i]<a[j]
            while (j >= i && nums[i] >= nums[j]) {
                j--;
            }
            // 交换a[i] 与 a[j]
            swap(nums, i, j);
        }
        // 如果上述i没找到，即小于0了，那代表当前序列已经是一个降序序列，即最大的序列，直接全部反转就是最小序列
        reverse(nums, i + 1);
    }

    public void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }

    public void reverse(int[] nums, int start) {
        int left = start, right = nums.length - 1;
        while (left < right) {
            swap(nums, left, right);
            left++;
            right--;
        }
    }
}
