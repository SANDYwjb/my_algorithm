package com.junbin.algorithm_81_100;

/**
 * 62. 不同路径-中等
 * 一个机器人位于一个 m x n 网格的左上角。机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角。问总共有多少条不同的路径？
 * 思路1：动态规划
 * 我们用 dp[i,j]表示从左上角走到 (i,j)的路径数量，其中 i 和 j 的范围分别是 [0,m) 和 [0,n)。
 * 由于我们每一步只能从向下或者向右移动一步，因此要想走到 (i,j)，如果向下走一步，那么会从 (i−1,j)走过来；如果向右走一步，
 * 那么会从 (i,j−1)走过来。因此我们可以写出动态规划转移方程：dp[i,j]=dp[i-1,j] + dp[i,j-1]
 * 需要注意的是，如果 i=0，那么 dp[i-1,j] 并不是一个满足要求的状态，我们需要忽略这一项；同理，如果 j=0，那么 dp[i,j-1] 并不是一个满足要求的状态，
 * 我们需要忽略这一项。
 * 初始条件为 dp[0,0] = 1，即从左上角走到左上角有一种方法。最终的答案即为 dp[m−1,n−1]。
 * 细节:
 * 为了方便代码编写，我们可以将所有的 dp(0,j)以及 dp(i,0)都设置为边界条件，它们的值均为 1。
 * 时间复杂度：O(mn),空间复杂度：O(mn)
 *
 * @author junbin.wang
 * @date 2023/2/25上午9:49
 */
public class UniquePaths_62 {
    public int uniquePaths(int m, int n) {
        int[][] dp = new int[m][n];
        for (int i = 0; i < m; ++i) {
            dp[i][0] = 1;
        }
        for (int j = 0; j < n; ++j) {
            dp[0][j] = 1;
        }
        for (int i = 1; i < m; ++i) {
            for (int j = 1; j < n; ++j) {
                dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
            }
        }
        return dp[m - 1][n - 1];
    }

    /**
     * 还有一种组合数学方法，性能更高
     * 从左上角到右下角的过程中，我们需要移动 m+n−2次，其中有 m−1次向下移动，n−1 次向右移动。因此路径的总数，
     * 就等于从 m+n−2次移动中选择 m−1次向下移动的方案数
     * 时间复杂度：O(m)。由于我们交换行列的值并不会对答案产生影响，因此我们总可以通过交换 m 和 n 使得 m≤n，
     * 这样空间复杂度降低至 O(min⁡(m,n))。
     * 空间复杂度：O(1)
     */
    public int uniquePaths2(int m, int n) {
        long ans = 1;
        for (int x = n, y = 1; y < m; ++x, ++y) {
            ans = ans * x / y;
        }
        return (int) ans;
    }
}
