package com.junbin.algorithm_1_20;

/**
 * 88.合并两个有序数组-简单
 * 请你合并 nums2 到 nums1 中，使合并后的数组同样按 非递减顺序 排列。
 * 注意：最终，合并后数组不应由函数返回，而是存储在数组 nums1 中。为了应对这种情况，nums1 的初始长度为 m + n，其中前 m 个元素表示应合并的元素，
 * 后 n 个元素为 0 ，应忽略。nums2 的长度为 n 。
 * 输入：nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
 * 输出：[1,2,2,3,5,6]
 * 解释：需要合并 [1,2,3] 和 [2,5,6] 。
 * 合并结果是 [*1*,*2*,2,*3*,5,6] ，其中斜体加粗标注的为 nums1 中的元素
 * 要求时间复杂度为： O(m + n)
 * <p>
 * 思路：
 * 逆向双指针解法，如果是正向，则需要临时变量来存储数组，不然原来的元素可能会在取出之前被覆盖。
 * 这一方法将两个数组看作队列，每次从两个数组尾部取出比较大的数字放到结果中。
 * 观察可知，数组1 的后半部分是空的，可以直接覆盖而不会影响结果。因此可以指针设置为从后向前遍历，每次取两者之中的较大者放进 数组1的最后面。
 * 严格来说，在此遍历过程中的任意一个时刻，数组 1中有 m-p1-1个元素被放入 数组1 的后半部， 数组2中有 n-p2-1 个元素被放入 数组1的后半部，
 * 而在指针 p1的后面，数组1有 m+n-p1-1个位置。由于m+n-p1-1 ≥ m-p1-1+n-p2-1 等价于 p2 ≥ −1 永远成立，因此 p1后面的位置永远足够容纳被插入的元素，
 * 不会产生 p1 的元素被覆盖的情况。
 *
 * @author junbin.wang
 * @date 2023/2/14下午9:15
 */
public class MergeTwoArray_88 {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        //队列尾部开始
        int p1 = m - 1, p2 = n - 1;
        int tail = m + n - 1;
        int cur;
        while (p1 >= 0 || p2 >= 0) {
            if (p1 == -1) {
                cur = nums2[p2--];
            } else if (p2 == -1) {
                cur = nums1[p1--];
            } else if (nums1[p1] > nums2[p2]) {
                cur = nums1[p1--];
            } else {
                cur = nums2[p2--];
            }
            nums1[tail--] = cur;
        }
    }
}
